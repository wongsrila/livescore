[
    {
        "id": 18863546,
        "sport_id": 1,
        "league_id": 82,
        "season_id": 21795,
        "stage_id": 77464501,
        "group_id": null,
        "aggregate_id": null,
        "round_id": 309301,
        "state_id": 1,
        "venue_id": 2169,
        "name": "Eintracht Frankfurt vs FC Augsburg",
        "starting_at": "2024-04-19 20:30:00",
        "result_info": null,
        "leg": "1/1",
        "details": null,
        "length": 90,
        "placeholder": false,
        "has_odds": true,
        "starting_at_timestamp": 1713551400,
        "round": {
            "id": 309301,
            "sport_id": 1,
            "league_id": 82,
            "season_id": 21795,
            "stage_id": 77464501,
            "name": "30",
            "finished": false,
            "is_current": true,
            "starting_at": "2024-04-19",
            "ending_at": "2024-04-21",
            "games_in_current_week": true
        },
        "league": {
            "id": 82,
            "sport_id": 1,
            "country_id": 11,
            "name": "Bundesliga",
            "active": true,
            "short_code": "GER BI",
            "image_path": "https://cdn.sportmonks.com/images/soccer/leagues/82.png",
            "type": "league",
            "sub_type": "domestic",
            "last_played_at": "2024-04-14 15:30:00",
            "category": 1,
            "has_jerseys": false,
            "country": {
                "id": 11,
                "continent_id": 1,
                "name": "Germany",
                "official_name": "Federal Republic of Germany",
                "fifa_name": "GER",
                "iso2": "DE",
                "iso3": "DEU",
                "latitude": "51.20246505737305",
                "longitude": "10.382203102111816",
                "borders": [
                    "AUT",
                    "BEL",
                    "CZE",
                    "DNK",
                    "FRA",
                    "LUX",
                    "NLD",
                    "POL",
                    "CHE"
                ],
                "image_path": "https://cdn.sportmonks.com/images/countries/png/short/de.png"
            }
        },
        "scores": [],
        "events": [],
        "participants": [
            {
                "id": 366,
                "sport_id": 1,
                "country_id": 11,
                "venue_id": 2169,
                "gender": "male",
                "name": "Eintracht Frankfurt",
                "short_code": "SGE",
                "image_path": "https://cdn.sportmonks.com/images/soccer/teams/14/366.png",
                "founded": 1899,
                "type": "domestic",
                "placeholder": false,
                "last_played_at": "2024-04-13 16:30:00",
                "meta": {
                    "location": "home",
                    "winner": null,
                    "position": 6
                }
            },
            {
                "id": 90,
                "sport_id": 1,
                "country_id": 11,
                "venue_id": 2165,
                "gender": "male",
                "name": "FC Augsburg",
                "short_code": "FCA",
                "image_path": "https://cdn.sportmonks.com/images/soccer/teams/26/90.png",
                "founded": 1907,
                "type": "domestic",
                "placeholder": false,
                "last_played_at": "2024-04-12 18:30:00",
                "meta": {
                    "location": "away",
                    "winner": null,
                    "position": 7
                }
            }
        ],
        "periods": [],
        "state": {
            "id": 1,
            "state": "NS",
            "name": "Not Started",
            "short_name": "NS",
            "developer_name": "NS",
            "type": null
        }
    },
    {
        "id": 18903869,
        "sport_id": 1,
        "league_id": 600,
        "season_id": 22057,
        "stage_id": 77465302,
        "group_id": null,
        "aggregate_id": null,
        "round_id": 313267,
        "state_id": 22,
        "venue_id": 340175,
        "name": "Beşiktaş vs Ankaragücü",
        "starting_at": "2024-04-19 19:00:00",
        "result_info": null,
        "leg": "1/1",
        "details": null,
        "length": 90,
        "placeholder": false,
        "has_odds": true,
        "starting_at_timestamp": 1713546000,
        "round": {
            "id": 313267,
            "sport_id": 1,
            "league_id": 600,
            "season_id": 22057,
            "stage_id": 77465302,
            "name": "33",
            "finished": false,
            "is_current": true,
            "starting_at": "2024-04-19",
            "ending_at": "2024-04-22",
            "games_in_current_week": true
        },
        "league": {
            "id": 600,
            "sport_id": 1,
            "country_id": 404,
            "name": "Super Lig",
            "active": true,
            "short_code": "TUR SL",
            "image_path": "https://cdn.sportmonks.com/images/soccer/leagues/24/600.png",
            "type": "league",
            "sub_type": "domestic",
            "last_played_at": "2024-04-15 17:00:00",
            "category": 2,
            "has_jerseys": false,
            "country": {
                "id": 404,
                "continent_id": 2,
                "name": "Turkey",
                "official_name": "Republic of Turkey",
                "fifa_name": "TUR",
                "iso2": "TR",
                "iso3": "TUR",
                "latitude": "39.05101013183594",
                "longitude": "34.93033981323242",
                "borders": [
                    "ARM",
                    "AZE",
                    "BGR",
                    "GEO",
                    "GRC",
                    "IRN",
                    "IRQ",
                    "SYR"
                ],
                "image_path": "https://cdn.sportmonks.com/images/countries/png/short/tr.png"
            }
        },
        "scores": [
            {
                "id": 14252460,
                "fixture_id": 18903869,
                "type_id": 1,
                "participant_id": 554,
                "score": {
                    "goals": 1,
                    "participant": "home"
                },
                "description": "1ST_HALF"
            },
            {
                "id": 14252461,
                "fixture_id": 18903869,
                "type_id": 1,
                "participant_id": 3470,
                "score": {
                    "goals": 0,
                    "participant": "away"
                },
                "description": "1ST_HALF"
            },
            {
                "id": 14252462,
                "fixture_id": 18903869,
                "type_id": 1525,
                "participant_id": 3470,
                "score": {
                    "goals": 0,
                    "participant": "away"
                },
                "description": "CURRENT"
            },
            {
                "id": 14252463,
                "fixture_id": 18903869,
                "type_id": 1525,
                "participant_id": 554,
                "score": {
                    "goals": 1,
                    "participant": "home"
                },
                "description": "CURRENT"
            },
            {
                "id": 14252882,
                "fixture_id": 18903869,
                "type_id": 2,
                "participant_id": 554,
                "score": {
                    "goals": 1,
                    "participant": "home"
                },
                "description": "2ND_HALF"
            },
            {
                "id": 14252883,
                "fixture_id": 18903869,
                "type_id": 2,
                "participant_id": 3470,
                "score": {
                    "goals": 0,
                    "participant": "away"
                },
                "description": "2ND_HALF"
            }
        ],
        "events": [
            {
                "id": 111505163,
                "fixture_id": 18903869,
                "period_id": 5360823,
                "participant_id": 554,
                "type_id": 14,
                "section": "event",
                "player_id": 10966299,
                "related_player_id": 164132,
                "player_name": "Ernest Muci",
                "related_player_name": "Gedson Fernandes",
                "result": "1-0",
                "info": null,
                "addition": "1st Goal",
                "minute": 18,
                "extra_minute": null,
                "injured": null,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1522
            },
            {
                "id": 111505721,
                "fixture_id": 18903869,
                "period_id": 5360823,
                "participant_id": 554,
                "type_id": 19,
                "section": "event",
                "player_id": 26965,
                "related_player_id": null,
                "player_name": "Jonas Svensson",
                "related_player_name": null,
                "result": null,
                "info": "Foul",
                "addition": null,
                "minute": 31,
                "extra_minute": null,
                "injured": null,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1496
            },
            {
                "id": 111506526,
                "fixture_id": 18903869,
                "period_id": 5360823,
                "participant_id": 554,
                "type_id": 18,
                "section": "event",
                "player_id": 202738,
                "related_player_id": 37563154,
                "player_name": "Tayyip Talha Sanuç",
                "related_player_name": "Serkan Emrecan Terzi",
                "result": null,
                "info": null,
                "addition": null,
                "minute": 44,
                "extra_minute": null,
                "injured": true,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1524
            }
        ],
        "participants": [
            {
                "id": 554,
                "sport_id": 1,
                "country_id": 404,
                "venue_id": 340175,
                "gender": "male",
                "name": "Beşiktaş",
                "short_code": "BES",
                "image_path": "https://cdn.sportmonks.com/images/soccer/teams/10/554.png",
                "founded": 1903,
                "type": "domestic",
                "placeholder": false,
                "last_played_at": "2024-04-13 16:00:00",
                "meta": {
                    "location": "home",
                    "winner": null,
                    "position": 4
                }
            },
            {
                "id": 3470,
                "sport_id": 1,
                "country_id": 404,
                "venue_id": 2021,
                "gender": "male",
                "name": "Ankaragücü",
                "short_code": null,
                "image_path": "https://cdn.sportmonks.com/images/soccer/teams/14/3470.png",
                "founded": 1910,
                "type": "domestic",
                "placeholder": false,
                "last_played_at": "2024-04-13 13:00:00",
                "meta": {
                    "location": "away",
                    "winner": null,
                    "position": 13
                }
            }
        ],
        "periods": [
            {
                "id": 5360823,
                "fixture_id": 18903869,
                "type_id": 1,
                "started": 1713546104,
                "ended": 1713548995,
                "counts_from": 0,
                "ticking": false,
                "sort_order": 1,
                "description": "1st-half",
                "time_added": 2,
                "period_length": 45,
                "minutes": 48,
                "seconds": 11,
                "has_timer": false
            },
            {
                "id": 5360957,
                "fixture_id": 18903869,
                "type_id": 2,
                "started": 1713550035,
                "ended": null,
                "counts_from": 45,
                "ticking": true,
                "sort_order": 2,
                "description": "2nd-half",
                "time_added": null,
                "period_length": 45,
                "minutes": 54,
                "seconds": 20,
                "has_timer": true
            }
        ],
        "state": {
            "id": 22,
            "state": "INPLAY_2ND_HALF",
            "name": "2nd Half",
            "short_name": "2nd",
            "developer_name": "INPLAY_2ND_HALF",
            "type": {
                "id": 2,
                "name": "2nd Half",
                "code": "2nd-half",
                "developer_name": "2ND_HALF",
                "model_type": "period",
                "stat_group": null
            }
        }
    },
    {
        "id": 19104358,
        "sport_id": 1,
        "league_id": 271,
        "season_id": 21644,
        "stage_id": 77463995,
        "group_id": null,
        "aggregate_id": null,
        "round_id": 336022,
        "state_id": 22,
        "venue_id": 318820,
        "name": "Randers vs OB",
        "starting_at": "2024-04-19 19:00:00",
        "result_info": null,
        "leg": "1/1",
        "details": null,
        "length": 90,
        "placeholder": false,
        "has_odds": true,
        "starting_at_timestamp": 1713546000,
        "round": {
            "id": 336022,
            "sport_id": 1,
            "league_id": 271,
            "season_id": 21644,
            "stage_id": 77463995,
            "name": "4",
            "finished": false,
            "is_current": true,
            "starting_at": "2024-04-19",
            "ending_at": "2024-04-21",
            "games_in_current_week": true
        },
        "league": {
            "id": 271,
            "sport_id": 1,
            "country_id": 320,
            "name": "Superliga",
            "active": true,
            "short_code": "DNK SL",
            "image_path": "https://cdn.sportmonks.com/images/soccer/leagues/271.png",
            "type": "league",
            "sub_type": "domestic",
            "last_played_at": "2024-04-15 17:00:00",
            "category": 2,
            "has_jerseys": false,
            "country": {
                "id": 320,
                "continent_id": 1,
                "name": "Denmark",
                "official_name": "Kingdom of Denmark",
                "fifa_name": "DEN",
                "iso2": "DK",
                "iso3": "DNK",
                "latitude": "56.10176086425781",
                "longitude": "9.555907249450684",
                "borders": [
                    "DEU"
                ],
                "image_path": "https://cdn.sportmonks.com/images/countries/png/short/dk.png"
            }
        },
        "scores": [
            {
                "id": 14252500,
                "fixture_id": 19104358,
                "type_id": 1525,
                "participant_id": 2356,
                "score": {
                    "goals": 0,
                    "participant": "home"
                },
                "description": "CURRENT"
            },
            {
                "id": 14252494,
                "fixture_id": 19104358,
                "type_id": 1,
                "participant_id": 2356,
                "score": {
                    "goals": 0,
                    "participant": "home"
                },
                "description": "1ST_HALF"
            },
            {
                "id": 14252495,
                "fixture_id": 19104358,
                "type_id": 1,
                "participant_id": 1789,
                "score": {
                    "goals": 0,
                    "participant": "away"
                },
                "description": "1ST_HALF"
            },
            {
                "id": 14252501,
                "fixture_id": 19104358,
                "type_id": 1525,
                "participant_id": 1789,
                "score": {
                    "goals": 0,
                    "participant": "away"
                },
                "description": "CURRENT"
            },
            {
                "id": 14252898,
                "fixture_id": 19104358,
                "type_id": 2,
                "participant_id": 2356,
                "score": {
                    "goals": 0,
                    "participant": "home"
                },
                "description": "2ND_HALF"
            },
            {
                "id": 14252899,
                "fixture_id": 19104358,
                "type_id": 2,
                "participant_id": 1789,
                "score": {
                    "goals": 0,
                    "participant": "away"
                },
                "description": "2ND_HALF"
            }
        ],
        "events": [
            {
                "id": 111505889,
                "fixture_id": 19104358,
                "period_id": 5360832,
                "participant_id": 2356,
                "type_id": 19,
                "section": "event",
                "player_id": 37622817,
                "related_player_id": null,
                "player_name": "Mohammed Fuseini",
                "related_player_name": null,
                "result": null,
                "info": null,
                "addition": null,
                "minute": 32,
                "extra_minute": null,
                "injured": null,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1496
            },
            {
                "id": 111505641,
                "fixture_id": 19104358,
                "period_id": 5360832,
                "participant_id": 1789,
                "type_id": 19,
                "section": "event",
                "player_id": 418253,
                "related_player_id": null,
                "player_name": "Sven Köhler",
                "related_player_name": null,
                "result": null,
                "info": "Foul",
                "addition": null,
                "minute": 29,
                "extra_minute": null,
                "injured": null,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1496
            },
            {
                "id": 111507935,
                "fixture_id": 19104358,
                "period_id": 5360965,
                "participant_id": 1789,
                "type_id": 18,
                "section": "event",
                "player_id": 84225,
                "related_player_id": 37418793,
                "player_name": "Nicklas Mouritsen",
                "related_player_name": "James Gomez",
                "result": null,
                "info": null,
                "addition": null,
                "minute": 46,
                "extra_minute": null,
                "injured": false,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1523
            },
            {
                "id": 111508247,
                "fixture_id": 19104358,
                "period_id": 5360965,
                "participant_id": 2356,
                "type_id": 19,
                "section": "event",
                "player_id": 25577,
                "related_player_id": null,
                "player_name": "Wessel Dammers",
                "related_player_name": null,
                "result": null,
                "info": "Foul",
                "addition": null,
                "minute": 50,
                "extra_minute": null,
                "injured": null,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1496
            }
        ],
        "participants": [
            {
                "id": 2356,
                "sport_id": 1,
                "country_id": 320,
                "venue_id": 318820,
                "gender": "male",
                "name": "Randers",
                "short_code": "RDF",
                "image_path": "https://cdn.sportmonks.com/images/soccer/teams/20/2356.png",
                "founded": 2003,
                "type": "domestic",
                "placeholder": false,
                "last_played_at": "2024-04-14 12:00:00",
                "meta": {
                    "location": "home",
                    "winner": null,
                    "position": 1
                }
            },
            {
                "id": 1789,
                "sport_id": 1,
                "country_id": 320,
                "venue_id": 214349,
                "gender": "male",
                "name": "OB",
                "short_code": "ODE",
                "image_path": "https://cdn.sportmonks.com/images/soccer/teams/29/1789.png",
                "founded": 1889,
                "type": "domestic",
                "placeholder": false,
                "last_played_at": "2024-04-12 17:00:00",
                "meta": {
                    "location": "away",
                    "winner": null,
                    "position": 3
                }
            }
        ],
        "periods": [
            {
                "id": 5360832,
                "fixture_id": 19104358,
                "type_id": 1,
                "started": 1713546142,
                "ended": 1713549014,
                "counts_from": 0,
                "ticking": false,
                "sort_order": 1,
                "description": "1st-half",
                "time_added": 2,
                "period_length": 45,
                "minutes": 47,
                "seconds": 52,
                "has_timer": false
            },
            {
                "id": 5360965,
                "fixture_id": 19104358,
                "type_id": 2,
                "started": 1713550001,
                "ended": null,
                "counts_from": 45,
                "ticking": true,
                "sort_order": 2,
                "description": "2nd-half",
                "time_added": null,
                "period_length": 45,
                "minutes": 54,
                "seconds": 54,
                "has_timer": true
            }
        ],
        "state": {
            "id": 22,
            "state": "INPLAY_2ND_HALF",
            "name": "2nd Half",
            "short_name": "2nd",
            "developer_name": "INPLAY_2ND_HALF",
            "type": {
                "id": 2,
                "name": "2nd Half",
                "code": "2nd-half",
                "developer_name": "2ND_HALF",
                "model_type": "period",
                "stat_group": null
            }
        }
    },
    {
        "id": 18870659,
        "sport_id": 1,
        "league_id": 384,
        "season_id": 21818,
        "stage_id": 77464586,
        "group_id": null,
        "aggregate_id": null,
        "round_id": 309932,
        "state_id": 22,
        "venue_id": 86,
        "name": "Genoa vs Lazio",
        "starting_at": "2024-04-19 18:30:00",
        "result_info": null,
        "leg": "1/1",
        "details": null,
        "length": 90,
        "placeholder": false,
        "has_odds": true,
        "starting_at_timestamp": 1713544200,
        "round": {
            "id": 309932,
            "sport_id": 1,
            "league_id": 384,
            "season_id": 21818,
            "stage_id": 77464586,
            "name": "33",
            "finished": false,
            "is_current": true,
            "starting_at": "2024-04-19",
            "ending_at": "2024-04-22",
            "games_in_current_week": true
        },
        "league": {
            "id": 384,
            "sport_id": 1,
            "country_id": 251,
            "name": "Serie A",
            "active": true,
            "short_code": "ITA SA",
            "image_path": "https://cdn.sportmonks.com/images/soccer/leagues/0/384.png",
            "type": "league",
            "sub_type": "domestic",
            "last_played_at": "2024-04-15 18:45:00",
            "category": 1,
            "has_jerseys": false,
            "country": {
                "id": 251,
                "continent_id": 1,
                "name": "Italy",
                "official_name": "Italian Republic",
                "fifa_name": "ITA",
                "iso2": "IT",
                "iso3": "ITA",
                "latitude": "42.7669792175293",
                "longitude": "12.493823051452637",
                "borders": [
                    "AUT",
                    "FRA",
                    "SMR",
                    "SVN",
                    "CHE",
                    "VAT"
                ],
                "image_path": "https://cdn.sportmonks.com/images/countries/png/short/it.png"
            }
        },
        "scores": [
            {
                "id": 14252220,
                "fixture_id": 18870659,
                "type_id": 1,
                "participant_id": 102,
                "score": {
                    "goals": 0,
                    "participant": "home"
                },
                "description": "1ST_HALF"
            },
            {
                "id": 14252221,
                "fixture_id": 18870659,
                "type_id": 1,
                "participant_id": 43,
                "score": {
                    "goals": 0,
                    "participant": "away"
                },
                "description": "1ST_HALF"
            },
            {
                "id": 14252222,
                "fixture_id": 18870659,
                "type_id": 1525,
                "participant_id": 102,
                "score": {
                    "goals": 0,
                    "participant": "home"
                },
                "description": "CURRENT"
            },
            {
                "id": 14252223,
                "fixture_id": 18870659,
                "type_id": 1525,
                "participant_id": 43,
                "score": {
                    "goals": 1,
                    "participant": "away"
                },
                "description": "CURRENT"
            },
            {
                "id": 14252630,
                "fixture_id": 18870659,
                "type_id": 2,
                "participant_id": 102,
                "score": {
                    "goals": 0,
                    "participant": "home"
                },
                "description": "2ND_HALF"
            },
            {
                "id": 14252631,
                "fixture_id": 18870659,
                "type_id": 2,
                "participant_id": 43,
                "score": {
                    "goals": 1,
                    "participant": "away"
                },
                "description": "2ND_HALF"
            }
        ],
        "events": [
            {
                "id": 111499962,
                "fixture_id": 18870659,
                "period_id": 5360743,
                "participant_id": 43,
                "type_id": 19,
                "section": "event",
                "player_id": 133391,
                "related_player_id": null,
                "player_name": "Nicolò Casale",
                "related_player_name": null,
                "result": null,
                "info": "Foul",
                "addition": null,
                "minute": 16,
                "extra_minute": null,
                "injured": null,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1496
            },
            {
                "id": 111504551,
                "fixture_id": 18870659,
                "period_id": 5360743,
                "participant_id": 43,
                "type_id": 18,
                "section": "event",
                "player_id": 129603,
                "related_player_id": 131999,
                "player_name": "Elseid Hysaj",
                "related_player_name": "Manuel Lazzari",
                "result": null,
                "info": null,
                "addition": null,
                "minute": 36,
                "extra_minute": null,
                "injured": true,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1524
            },
            {
                "id": 111505797,
                "fixture_id": 18870659,
                "period_id": 5360871,
                "participant_id": 43,
                "type_id": 18,
                "section": "event",
                "player_id": 129202,
                "related_player_id": 133391,
                "player_name": "Alessio Romagnoli",
                "related_player_name": "Nicolò Casale",
                "result": null,
                "info": null,
                "addition": null,
                "minute": 46,
                "extra_minute": null,
                "injured": false,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1523
            },
            {
                "id": 111507220,
                "fixture_id": 18870659,
                "period_id": 5360871,
                "participant_id": 102,
                "type_id": 18,
                "section": "event",
                "player_id": 37565662,
                "related_player_id": 133599,
                "player_name": "David Ankeye",
                "related_player_name": "Caleb Ekuban",
                "result": null,
                "info": null,
                "addition": null,
                "minute": 68,
                "extra_minute": null,
                "injured": false,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1523
            },
            {
                "id": 111507115,
                "fixture_id": 18870659,
                "period_id": 5360871,
                "participant_id": 43,
                "type_id": 14,
                "section": "event",
                "player_id": 827,
                "related_player_id": 310131,
                "player_name": "Luis Alberto",
                "related_player_name": "Daichi Kamada",
                "result": "0-1",
                "info": null,
                "addition": "1st Goal",
                "minute": 67,
                "extra_minute": null,
                "injured": null,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1522
            },
            {
                "id": 111507238,
                "fixture_id": 18870659,
                "period_id": 5360871,
                "participant_id": 43,
                "type_id": 18,
                "section": "event",
                "player_id": 129476,
                "related_player_id": 524055,
                "player_name": "Danilo Cataldi",
                "related_player_name": "Taty Castellanos",
                "result": null,
                "info": null,
                "addition": null,
                "minute": 68,
                "extra_minute": null,
                "injured": false,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1523
            },
            {
                "id": 111507980,
                "fixture_id": 18870659,
                "period_id": 5360871,
                "participant_id": 102,
                "type_id": 18,
                "section": "event",
                "player_id": 131637,
                "related_player_id": 537823,
                "player_name": "Stefano Sabelli",
                "related_player_name": "Alessandro Vogliacco",
                "result": null,
                "info": null,
                "addition": null,
                "minute": 79,
                "extra_minute": null,
                "injured": false,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1523
            },
            {
                "id": 111507224,
                "fixture_id": 18870659,
                "period_id": 5360871,
                "participant_id": 102,
                "type_id": 18,
                "section": "event",
                "player_id": 31670,
                "related_player_id": 23596,
                "player_name": "Milan Badelj ",
                "related_player_name": "Kevin Strootman",
                "result": null,
                "info": null,
                "addition": null,
                "minute": 68,
                "extra_minute": null,
                "injured": false,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1523
            },
            {
                "id": 111507245,
                "fixture_id": 18870659,
                "period_id": 5360871,
                "participant_id": 43,
                "type_id": 18,
                "section": "event",
                "player_id": 1923,
                "related_player_id": 129454,
                "player_name": "Pedro",
                "related_player_name": "Felipe Anderson",
                "result": null,
                "info": null,
                "addition": null,
                "minute": 68,
                "extra_minute": null,
                "injured": false,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1523
            },
            {
                "id": 111508523,
                "fixture_id": 18870659,
                "period_id": 5360871,
                "participant_id": 43,
                "type_id": 19,
                "section": "event",
                "player_id": 129476,
                "related_player_id": null,
                "player_name": "Danilo Cataldi",
                "related_player_name": null,
                "result": null,
                "info": null,
                "addition": null,
                "minute": 87,
                "extra_minute": null,
                "injured": null,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": null
            },
            {
                "id": 111508409,
                "fixture_id": 18870659,
                "period_id": 5360871,
                "participant_id": 43,
                "type_id": 18,
                "section": "event",
                "player_id": 30482209,
                "related_player_id": 827,
                "player_name": "Nicolò Rovella ",
                "related_player_name": "Luis Alberto",
                "result": null,
                "info": null,
                "addition": null,
                "minute": 86,
                "extra_minute": null,
                "injured": null,
                "on_bench": false,
                "coach_id": null,
                "sub_type_id": 1523
            }
        ],
        "participants": [
            {
                "id": 102,
                "sport_id": 1,
                "country_id": 251,
                "venue_id": 86,
                "gender": "male",
                "name": "Genoa",
                "short_code": "GEN",
                "image_path": "https://cdn.sportmonks.com/images/soccer/teams/6/102.png",
                "founded": 1893,
                "type": "domestic",
                "placeholder": false,
                "last_played_at": "2024-04-15 16:30:00",
                "meta": {
                    "location": "home",
                    "winner": null,
                    "position": 12
                }
            },
            {
                "id": 43,
                "sport_id": 1,
                "country_id": 251,
                "venue_id": 7189,
                "gender": "male",
                "name": "Lazio",
                "short_code": "LAZ",
                "image_path": "https://cdn.sportmonks.com/images/soccer/teams/11/43.png",
                "founded": 1900,
                "type": "domestic",
                "placeholder": false,
                "last_played_at": "2024-04-12 18:45:00",
                "meta": {
                    "location": "away",
                    "winner": null,
                    "position": 8
                }
            }
        ],
        "periods": [
            {
                "id": 5360743,
                "fixture_id": 18870659,
                "type_id": 1,
                "started": 1713544298,
                "ended": 1713547148,
                "counts_from": 0,
                "ticking": false,
                "sort_order": 1,
                "description": "1st-half",
                "time_added": 1,
                "period_length": 45,
                "minutes": 47,
                "seconds": 30,
                "has_timer": false
            },
            {
                "id": 5360871,
                "fixture_id": 18870659,
                "type_id": 2,
                "started": 1713548024,
                "ended": null,
                "counts_from": 45,
                "ticking": true,
                "sort_order": 2,
                "description": "2nd-half",
                "time_added": null,
                "period_length": 45,
                "minutes": 87,
                "seconds": 51,
                "has_timer": true
            }
        ],
        "state": {
            "id": 22,
            "state": "INPLAY_2ND_HALF",
            "name": "2nd Half",
            "short_name": "2nd",
            "developer_name": "INPLAY_2ND_HALF",
            "type": {
                "id": 2,
                "name": "2nd Half",
                "code": "2nd-half",
                "developer_name": "2ND_HALF",
                "model_type": "period",
                "stat_group": null
            }
        }
    }
]

2024-04-19 20:17:47
Claude3 - Sonnet
The provided data is a JSON array containing information about soccer matches, including details such as the teams involved, scores, events that occurred during the match, and the current state of the match.

Here's a breakdown of the structure of each object in the array:

id: The unique identifier for the match.
sport_id, league_id, season_id, stage_id, round_id: Identifiers for the sport, league, season, stage, and round that the match belongs to.
state_id: The current state of the match (e.g., not started, in progress, finished).
venue_id: The identifier for the venue where the match is being played.
name: The name of the match, typically in the format "Home Team vs Away Team".
starting_at and starting_at_timestamp: The scheduled start time of the match in string and timestamp formats, respectively.
round, league, scores, events, participants, periods, and state: Nested objects containing more detailed information about the round, league, scores, events, teams/participants, periods (halves), and the current state of the match.
The nested objects provide further details about various aspects of the match. For example, the participants array contains objects with information about each team, such as their name, country, venue, and meta data like their current position in the league. The events array lists the notable events that occurred during the match, like goals, substitutions, and fouls.

This data structure is commonly used to represent sports match data, allowing applications to display real-time updates, scores, and other relevant information to users.

2024-04-19 20:17:47

Copy
You
// Format timestamp function
function formatTimestampAsTime(timestamp) {
  if (timestamp === undefined) return '';

  // Convert the Unix timestamp from seconds to milliseconds
  const date = new Date(timestamp * 1000);
  const timeOptions = {
    hour: '2-digit',
    minute: '2-digit',
  };
  return date.toLocaleTimeString('nl-NL', timeOptions);
}

function formatFixtureDate(starting_at) {
  if (!starting_at) return '';

  const dateString = starting_at;
  const date = new Date(dateString);
  const monthNames = [
    'januari',
    'februari',
    'maart',
    'april',
    'mei',
    'juni',
    'juli',
    'augustus',
    'september',
    'oktober',
    'november',
    'december',
  ];
  const day = date.getDate();
  const monthIndex = date.getMonth();
  const year = date.getFullYear().toString().slice(-2);
  const month = monthNames[monthIndex];
  const result = `${day} ${month} '${year}`;
  return result; // Output: "14 augustus '10"
}

const stateNames = {
  1: 'Not Started',
  2: '1st Half',
  3: 'Half Time',
  4: 'Break',
  5: 'Full Time',
  6: 'Extra Time',
  7: 'After Extra Time',
  8: 'After Penalties',
  9: 'Penalties',
  10: 'Postponed',
  11: 'Suspended',
  12: 'Cancelled',
  13: 'To Be Announced',
  14: 'Walk Over',
  15: 'Abandoned',
  16: 'Delayed',
  17: 'Awarded',
  18: 'Interrupted',
  19: 'Awaiting Updates',
  20: 'Deleted',
  21: 'Extra Time - Break',
  22: '2nd Half',
  23: 'ET - 2nd Half',
  25: 'Penalties - Break',
  26: 'Pending',
};

const evtSource = new EventSource(`/livescore-stream`);
evtSource.onmessage = function (event) {
  const data = JSON.parse(event.data);
  console.log(data);
  const tableWrapper = document.getElementsByClassName('table_wrapper')[0];

  // Clear the existing content
  tableWrapper.innerHTML = '';

  data.forEach((fixture) => {
    // Get current time or state name
    const tickingPeriod = fixture.periods?.find(
      (period) => period.ticking === true
    );
    let currentTimeOrState;

    if (fixture.state.id === 3) {
      currentTimeOrState = 'HT';
    } else {
      currentTimeOrState =
        tickingPeriod?.minutes || stateNames[fixture.state.id] || '';
    }

    // Create the fixture_row HTML
    const fixtureRowHTML = /*html*/ `
      <div class="fixture_row">
        <div class="row_top">
          <div class="league_info">
            <div class="league_info-country">
              <div class="circle-mask">
                ${
                  fixture.league?.country?.image_path
                    ? `<img src="${fixture.league.country.image_path}" alt="logo" height="20" />`
                    : ''
                }
              </div>
              <p class="fixture_date">${fixture.league?.country?.name || ''}</p>
            </div>
            <div class="league_info-league fixture_date">
              ${fixture.league?.name || ''} | Round ${fixture.round?.name || ''}
            </div>
          </div>
          <div class="fixture_date">
            ${formatTimestampAsTime(
              fixture.starting_at_timestamp
            )} - ${formatFixtureDate(fixture.starting_at)}
          </div>
        </div>
        <div class="row_bottom">
          <div class="state-wrapper"><p class="state">${currentTimeOrState}<span class="live-data">'</span></p></div>
          <div class="fixture_h2h"></div>
          <div></div>
        </div>
      </div>
    `;

    // Insert the fixtureRowHTML inside table_wrapper
    tableWrapper.innerHTML += fixtureRowHTML;
  });
};

How can i only display the <span class="live-data">'</span> when the ticker is true

2024-04-19 20:18:42
Claude3 - Sonnet
To display the <span class="live-data">'</span> only when the ticker is true, you can modify the code in the evtSource.onmessage function. Specifically, you need to check if the tickingPeriod exists before adding the <span> element to the HTML.

Here's the modified code:

javascript
Copy code
evtSource.onmessage = function (event) {
  const data = JSON.parse(event.data);
  console.log(data);
  const tableWrapper = document.getElementsByClassName('table_wrapper')[0];

  // Clear the existing content
  tableWrapper.innerHTML = '';

  data.forEach((fixture) => {
    // Get current time or state name
    const tickingPeriod = fixture.periods?.find(
      (period) => period.ticking === true
    );
    let currentTimeOrState;
    let liveTicker = ''; // Initialize liveTicker as an empty string

    if (fixture.state.id === 3) {
      currentTimeOrState = 'HT';
    } else {
      currentTimeOrState =
        tickingPeriod?.minutes || stateNames[fixture.state.id] || '';
    }

    // Check if the tickingPeriod exists and set the liveTicker accordingly
    if (tickingPeriod) {
      liveTicker = `<span class="live-data">'</span>`;
    }

    // Create the fixture_row HTML
    const fixtureRowHTML = /*html*/ `
      <div class="fixture_row">
        <div class="row_top">
          <div class="league_info">
            <div class="league_info-country">
              <div class="circle-mask">
                ${
                  fixture.league?.country?.image_path
                    ? `<img src="${fixture.league.country.image_path}" alt="logo" height="20" />`
                    : ''
                }
              </div>
              <p class="fixture_date">${fixture.league?.country?.name || ''}</p>
            </div>
            <div class="league_info-league fixture_date">
              ${fixture.league?.name || ''} | Round ${fixture.round?.name || ''}
            </div>
          </div>
          <div class="fixture_date">
            ${formatTimestampAsTime(
              fixture.starting_at_timestamp
            )} - ${formatFixtureDate(fixture.starting_at)}
          </div>
        </div>
        <div class="row_bottom">
          <div class="state-wrapper"><p class="state">${currentTimeOrState}${liveTicker}</p></div>
          <div class="fixture_h2h"></div>
          <div></div>
        </div>
      </div>
    `;

    // Insert the fixtureRowHTML inside table_wrapper
    tableWrapper.innerHTML += fixtureRowHTML;
  });
};
In the modified code, we initialize the liveTicker variable as an empty string. Then, we check if the tickingPeriod exists using an if statement. If it exists, we set the liveTicker variable to <span class="live-data">'</span>. Finally, we append the liveTicker to the currentTimeOrState when creating the fixtureRowHTML.

With this change, the <span class="live-data">'</span> will only be displayed when the tickingPeriod exists (i.e., when the ticker is true).

2024-04-19 20:18:42

Copy
You
make copy paste for me

2024-04-19 20:20:40
Claude3 - Sonnet
Here's the updated code with the requested modification:

javascript
Copy code
// Format timestamp function
function formatTimestampAsTime(timestamp) {
  if (timestamp === undefined) return '';

  // Convert the Unix timestamp from seconds to milliseconds
  const date = new Date(timestamp * 1000);
  const timeOptions = {
    hour: '2-digit',
    minute: '2-digit',
  };
  return date.toLocaleTimeString('nl-NL', timeOptions);
}

function formatFixtureDate(starting_at) {
  if (!starting_at) return '';

  const dateString = starting_at;
  const date = new Date(dateString);
  const monthNames = [
    'januari',
    'februari',
    'maart',
    'april',
    'mei',
    'juni',
    'juli',
    'augustus',
    'september',
    'oktober',
    'november',
    'december',
  ];
  const day = date.getDate();
  const monthIndex = date.getMonth();
  const year = date.getFullYear().toString().slice(-2);
  const month = monthNames[monthIndex];
  const result = `${day} ${month} '${year}`;
  return result; // Output: "14 augustus '10"
}

const stateNames = {
  1: 'Not Started',
  2: '1st Half',
  3: 'Half Time',
  4: 'Break',
  5: 'Full Time',
  6: 'Extra Time',
  7: 'After Extra Time',
  8: 'After Penalties',
  9: 'Penalties',
  10: 'Postponed',
  11: 'Suspended',
  12: 'Cancelled',
  13: 'To Be Announced',
  14: 'Walk Over',
  15: 'Abandoned',
  16: 'Delayed',
  17: 'Awarded',
  18: 'Interrupted',
  19: 'Awaiting Updates',
  20: 'Deleted',
  21: 'Extra Time - Break',
  22: '2nd Half',
  23: 'ET - 2nd Half',
  25: 'Penalties - Break',
  26: 'Pending',
};

const evtSource = new EventSource(`/livescore-stream`);
evtSource.onmessage = function (event) {
  const data = JSON.parse(event.data);
  console.log(data);
  const tableWrapper = document.getElementsByClassName('table_wrapper')[0];

  // Clear the existing content
  tableWrapper.innerHTML = '';

  data.forEach((fixture) => {
    // Get current time or state name
    const tickingPeriod = fixture.periods?.find(
      (period) => period.ticking === true
    );
    let currentTimeOrState;
    let liveTicker = ''; // Initialize liveTicker as an empty string

    if (fixture.state.id === 3) {
      currentTimeOrState = 'HT';
    } else {
      currentTimeOrState =
        tickingPeriod?.minutes || stateNames[fixture.state.id] || '';
    }

    // Check if the tickingPeriod exists and set the liveTicker accordingly
    if (tickingPeriod) {
      liveTicker = `<span class="live-data">'</span>`;
    }

    // Create the fixture_row HTML
    const fixtureRowHTML = /*html*/ `
      <div class="fixture_row">
        <div class="row_top">
          <div class="league_info">
            <div class="league_info-country">
              <div class="circle-mask">
                ${
                  fixture.league?.country?.image_path
                    ? `<img src="${fixture.league.country.image_path}" alt="logo" height="20" />`
                    : ''
                }
              </div>
              <p class="fixture_date">${fixture.league?.country?.name || ''}</p>
            </div>
            <div class="league_info-league fixture_date">
              ${fixture.league?.name || ''} | Round ${fixture.round?.name || ''}
            </div>
          </div>
          <div class="fixture_date">
            ${formatTimestampAsTime(
              fixture.starting_at_timestamp
            )} - ${formatFixtureDate(fixture.starting_at)}
          </div>
        </div>
        <div class="row_bottom">
          <div class="state-wrapper"><p class="state">${currentTimeOrState}${liveTicker}</p></div>
          <div class="fixture_h2h"></div>
          <div></div>
        </div>
      </div>
    `;

    // Insert the fixtureRowHTML inside table_wrapper
    tableWrapper.innerHTML += fixtureRowHTML;
  });
};
This code adds the <span class="live-data">'</span> element only when the tickingPeriod exists, indicating that the match is currently in progress.

2024-04-19 20:20:40

Copy
You
"periods": [
      {
        "id": 5360832,
        "fixture_id": 19104358,
        "type_id": 1,
        "started": 1713546142,
        "ended": 1713549014,
        "counts_from": 0,
        "ticking": false,
        "sort_order": 1,
        "description": "1st-half",
        "time_added": 2,
        "period_length": 45,
        "minutes": 47,
        "seconds": 52,
        "has_timer": false
      },
      {
        "id": 5360965,
        "fixture_id": 19104358,
        "type_id": 2,
        "started": 1713550001,
        "ended": null,
        "counts_from": 45,
        "ticking": true,
        "sort_order": 2,
        "description": "2nd-half",
        "time_added": null,
        "period_length": 45,
        "minutes": 59,
        "seconds": 30,
        "has_timer": true
      }
    ]

how can i display the time_added next to the minutes when its available?

2024-04-19 20:26:06
Claude3 - Sonnet
To display the time_added next to the minutes when it's available, you can modify the code inside the evtSource.onmessage function. Here's the updated code:

javascript
Copy code
evtSource.onmessage = function (event) {
  const data = JSON.parse(event.data);
  console.log(data);
  const tableWrapper = document.getElementsByClassName('table_wrapper')[0];

  // Clear the existing content
  tableWrapper.innerHTML = '';

  data.forEach((fixture) => {
    // Get current time or state name
    const tickingPeriod = fixture.periods?.find(
      (period) => period.ticking === true
    );
    let currentTimeOrState;
    let liveTicker = ''; // Initialize liveTicker as an empty string

    if (fixture.state.id === 3) {
      currentTimeOrState = 'HT';
    } else {
      currentTimeOrState =
        tickingPeriod?.minutes
          ? `${tickingPeriod.minutes}'${tickingPeriod.time_added !== null ? `+${tickingPeriod.time_added}'` : ''}`
          : stateNames[fixture.state.id] || '';
    }

    // Check if the tickingPeriod exists and set the liveTicker accordingly
    if (tickingPeriod) {
      liveTicker = `<span class="live-data">'</span>`;
    }

    // Create the fixture_row HTML
    const fixtureRowHTML = /*html*/ `
      <div class="fixture_row">
        <div class="row_top">
          <div class="league_info">
            <div class="league_info-country">
              <div class="circle-mask">
                ${
                  fixture.league?.country?.image_path
                    ? `<img src="${fixture.league.country.image_path}" alt="logo" height="20" />`
                    : ''
                }
              </div>
              <p class="fixture_date">${fixture.league?.country?.name || ''}</p>
            </div>
            <div class="league_info-league fixture_date">
              ${fixture.league?.name || ''} | Round ${fixture.round?.name || ''}
            </div>
          </div>
          <div class="fixture_date">
            ${formatTimestampAsTime(
              fixture.starting_at_timestamp
            )} - ${formatFixtureDate(fixture.starting_at)}
          </div>
        </div>
        <div class="row_bottom">
          <div class="state-wrapper"><p class="state">${currentTimeOrState}${liveTicker}</p></div>
          <div class="fixture_h2h"></div>
          <div></div>
        </div>
      </div>
    `;

    // Insert the fixtureRowHTML inside table_wrapper
    tableWrapper.innerHTML += fixtureRowHTML;
  });
};
In the modified code, the currentTimeOrState variable is updated to include the time_added value if it's available. Here's the updated line:

javascript
Copy code
currentTimeOrState =
  tickingPeriod?.minutes
    ? `${tickingPeriod.minutes}'${tickingPeriod.time_added !== null ? `+${tickingPeriod.time_added}'` : ''}`
    : stateNames[fixture.state.id] || '';
This code checks if tickingPeriod.minutes exists. If it does, it constructs a string with the minutes value, followed by a single quote ('). If tickingPeriod.time_added is not null, it appends +${tickingPeriod.time_added}' to the string.

For example, if tickingPeriod.minutes is 59 and tickingPeriod.time_added is 3, the currentTimeOrState will be 59'+3'.

With this change, the time_added value will be displayed next to the minutes when it's available.

2024-04-19 20:26:06

Copy
You
i want the added time in a seperate span tag so that i can style it

2024-04-19 20:27:47
Claude3 - Sonnet
Sure, we can modify the code to display the added time in a separate span tag. Here's the updated code:

javascript
Copy code
evtSource.onmessage = function (event) {
  const data = JSON.parse(event.data);
  console.log(data);
  const tableWrapper = document.getElementsByClassName('table_wrapper')[0];

  // Clear the existing content
  tableWrapper.innerHTML = '';

  data.forEach((fixture) => {
    // Get current time or state name
    const tickingPeriod = fixture.periods?.find(
      (period) => period.ticking === true
    );
    let currentTimeOrState;
    let liveTicker = ''; // Initialize liveTicker as an empty string
    let addedTime = ''; // Initialize addedTime as an empty string

    if (fixture.state.id === 3) {
      currentTimeOrState = 'HT';
    } else {
      currentTimeOrState = tickingPeriod?.minutes || stateNames[fixture.state.id] || '';
      // Check if time_added is available and set the addedTime accordingly
      if (tickingPeriod?.time_added !== null) {
        addedTime = `<span class="added-time">+${tickingPeriod.time_added}'</span>`;
      }
    }

    // Check if the tickingPeriod exists and set the liveTicker accordingly
    if (tickingPeriod) {
      liveTicker = `<span class="live-data">'</span>`;
    }

    // Create the fixture_row HTML
    const fixtureRowHTML = /*html*/ `
      <div class="fixture_row">
        <div class="row_top">
          <div class="league_info">
            <div class="league_info-country">
              <div class="circle-mask">
                ${
                  fixture.league?.country?.image_path
                    ? `<img src="${fixture.league.country.image_path}" alt="logo" height="20" />`
                    : ''
                }
              </div>
              <p class="fixture_date">${fixture.league?.country?.name || ''}</p>
            </div>
            <div class="league_info-league fixture_date">
              ${fixture.league?.name || ''} | Round ${fixture.round?.name || ''}
            </div>
          </div>
          <div class="fixture_date">
            ${formatTimestampAsTime(
              fixture.starting_at_timestamp
            )} - ${formatFixtureDate(fixture.starting_at)}
          </div>
        </div>
        <div class="row_bottom">
          <div class="state-wrapper"><p class="state">${currentTimeOrState}${liveTicker}${addedTime}</p></div>
          <div class="fixture_h2h"></div>
          <div></div>
        </div>
      </div>
    `;

    // Insert the fixtureRowHTML inside table_wrapper
    tableWrapper.innerHTML += fixtureRowHTML;
  });
};
In this updated code, we introduced a new variable called addedTime. If tickingPeriod.time_added is not null, we set addedTime to <span class="added-time">+${tickingPeriod.time_added}'</span>. This way, the added time will be wrapped in a <span> tag with the class added-time.

We then append the addedTime variable to the currentTimeOrState string when creating the fixtureRowHTML.

With this change, the added time will be displayed within a separate <span> tag with the class added-time. You can then style this element using CSS to achieve the desired appearance.

For example, you could add the following CSS to style the added-time class:

css
Copy code
.added-time {
  color: red; /* or any other color you prefer */
  font-weight: bold; /* or any other styles you want to apply */
}
This will make the added time display in a red color and with a bold font weight.

2024-04-19 20:27:47

Copy
You
create copy paste

2024-04-19 20:28:29
Claude3 - Sonnet
Here's the updated code with the added time displayed in a separate span tag:

javascript
Copy code
// Format timestamp function
function formatTimestampAsTime(timestamp) {
  if (timestamp === undefined) return '';

  // Convert the Unix timestamp from seconds to milliseconds
  const date = new Date(timestamp * 1000);
  const timeOptions = {
    hour: '2-digit',
    minute: '2-digit',
  };
  return date.toLocaleTimeString('nl-NL', timeOptions);
}

function formatFixtureDate(starting_at) {
  if (!starting_at) return '';

  const dateString = starting_at;
  const date = new Date(dateString);
  const monthNames = [
    'januari',
    'februari',
    'maart',
    'april',
    'mei',
    'juni',
    'juli',
    'augustus',
    'september',
    'oktober',
    'november',
    'december',
  ];
  const day = date.getDate();
  const monthIndex = date.getMonth();
  const year = date.getFullYear().toString().slice(-2);
  const month = monthNames[monthIndex];
  const result = `${day} ${month} '${year}`;
  return result; // Output: "14 augustus '10"
}

const stateNames = {
  1: 'Not Started',
  2: '1st Half',
  3: 'Half Time',
  4: 'Break',
  5: 'Full Time',
  6: 'Extra Time',
  7: 'After Extra Time',
  8: 'After Penalties',
  9: 'Penalties',
  10: 'Postponed',
  11: 'Suspended',
  12: 'Cancelled',
  13: 'To Be Announced',
  14: 'Walk Over',
  15: 'Abandoned',
  16: 'Delayed',
  17: 'Awarded',
  18: 'Interrupted',
  19: 'Awaiting Updates',
  20: 'Deleted',
  21: 'Extra Time - Break',
  22: '2nd Half',
  23: 'ET - 2nd Half',
  25: 'Penalties - Break',
  26: 'Pending',
};

const evtSource = new EventSource(`/livescore-stream`);
evtSource.onmessage = function (event) {
  const data = JSON.parse(event.data);
  console.log(data);
  const tableWrapper = document.getElementsByClassName('table_wrapper')[0];

  // Clear the existing content
  tableWrapper.innerHTML = '';

  data.forEach((fixture) => {
    // Get current time or state name
    const tickingPeriod = fixture.periods?.find(
      (period) => period.ticking === true
    );
    let currentTimeOrState;
    let liveTicker = ''; // Initialize liveTicker as an empty string
    let addedTime = ''; // Initialize addedTime as an empty string

    if (fixture.state.id === 3) {
      currentTimeOrState = 'HT';
    } else {
      currentTimeOrState = tickingPeriod?.minutes || stateNames[fixture.state.id] || '';
      // Check if time_added is available and set the addedTime accordingly
      if (tickingPeriod?.time_added !== null) {
        addedTime = `<span class="added-time">+${tickingPeriod.time_added}'</span>`;
      }
    }

    // Check if the tickingPeriod exists and set the liveTicker accordingly
    if (tickingPeriod) {
      liveTicker = `<span class="live-data">'</span>`;
    }

    // Create the fixture_row HTML
    const fixtureRowHTML = /*html*/ `
      <div class="fixture_row">
        <div class="row_top">
          <div class="league_info">
            <div class="league_info-country">
              <div class="circle-mask">
                ${
                  fixture.league?.country?.image_path
                    ? `<img src="${fixture.league.country.image_path}" alt="logo" height="20" />`
                    : ''
                }
              </div>
              <p class="fixture_date">${fixture.league?.country?.name || ''}</p>
            </div>
            <div class="league_info-league fixture_date">
              ${fixture.league?.name || ''} | Round ${fixture.round?.name || ''}
            </div>
          </div>
          <div class="fixture_date">
            ${formatTimestampAsTime(
              fixture.starting_at_timestamp
            )} - ${formatFixtureDate(fixture.starting_at)}
          </div>
        </div>
        <div class="row_bottom">
          <div class="state-wrapper"><p class="state">${currentTimeOrState}${liveTicker}${addedTime}</p></div>
          <div class="fixture_h2h"></div>
          <div></div>
        </div>
      </div>
    `;

    // Insert the fixtureRowHTML inside table_wrapper
    tableWrapper.innerHTML += fixtureRowHTML;
  });
};
In this updated code, the added time will be displayed within a separate <span> tag with the class added-time. You can then style this element using CSS to achieve the desired appearance.

For example, you could add the following CSS to style the added-time class:

css
Copy code
.added-time {
  color: red; /* or any other color you prefer */
  font-weight: bold; /* or any other styles you want to apply */
}
This will make the added time display in a red color and with a bold font weight.

2024-04-19 20:28:29

Copy
You
if i try to   console.log(tickingPeriod.minutes); i get this error:

Uncaught TypeError: Cannot read properties of undefined (reading 'minutes')
    at livescores-sse.js:94:31
    at Array.forEach (<anonymous>)
    at evtSource.onmessage (livescores-sse.js:78:8)

2024-04-19 20:46:33
Claude3 - Sonnet
The error you're encountering is because tickingPeriod can be undefined in certain cases, and you're trying to access the minutes property of an undefined value, which is causing the error.

To fix this, you should add a check to ensure that tickingPeriod is not undefined before trying to access its properties. Here's the updated code:

javascript
Copy code
evtSource.onmessage = function (event) {
  const data = JSON.parse(event.data);
  console.log(data);
  const tableWrapper = document.getElementsByClassName('table_wrapper')[0];

  // Clear the existing content
  tableWrapper.innerHTML = '';

  data.forEach((fixture) => {
    // Get current time or state name
    const tickingPeriod = fixture.periods?.find(
      (period) => period.ticking === true
    );
    let currentTimeOrState;
    let liveTicker = ''; // Initialize liveTicker as an empty string
    let addedTime = ''; // Initialize addedTime as an empty string

    if (fixture.state.id === 3) {
      currentTimeOrState = 'HT';
    } else {
      // Check if tickingPeriod is not undefined before accessing its properties
      if (tickingPeriod) {
        currentTimeOrState = tickingPeriod.minutes;
        // Check if time_added is available and set the addedTime accordingly
        if (tickingPeriod.time_added !== null) {
          addedTime = `<span class="added-time">+${tickingPeriod.time_added}'</span>`;
        }
      } else {
        currentTimeOrState = stateNames[fixture.state.id] || '';
      }
    }

    // Check if the tickingPeriod exists and set the liveTicker accordingly
    if (tickingPeriod) {
      liveTicker = `<span class="live-data">'</span>`;
    }

    // Create the fixture_row HTML
    const fixtureRowHTML = /*html*/ `
      <div class="fixture_row">
        <div class="row_top">
          <div class="league_info">
            <div class="league_info-country">
              <div class="circle-mask">
                ${
                  fixture.league?.country?.image_path
                    ? `<img src="${fixture.league.country.image_path}" alt="logo" height="20" />`
                    : ''
                }
              </div>
              <p class="fixture_date">${fixture.league?.country?.name || ''}</p>
            </div>
            <div class="league_info-league fixture_date">
              ${fixture.league?.name || ''} | Round ${fixture.round?.name || ''}
            </div>
          </div>
          <div class="fixture_date">
            ${formatTimestampAsTime(
              fixture.starting_at_timestamp
            )} - ${formatFixtureDate(fixture.starting_at)}
          </div>
        </div>
        <div class="row_bottom">
          <div class="state-wrapper"><p class="state">${currentTimeOrState}${liveTicker}${addedTime}</p></div>
          <div class="fixture_h2h"></div>
          <div></div>
        </div>
      </div>
    `;

    // Insert the fixtureRowHTML inside table_wrapper
    tableWrapper.innerHTML += fixtureRowHTML;
  });
};
In the updated code, we've added an if statement to check if tickingPeriod is not undefined before accessing its properties. If tickingPeriod is not undefined, we assign tickingPeriod.minutes to currentTimeOrState, and then check if tickingPeriod.time_added is available to set the addedTime value accordingly. If tickingPeriod is undefined, we assign the corresponding state name from the stateNames object to currentTimeOrState.

This should prevent the Cannot read properties of undefined error from occurring when tickingPeriod is undefined.

2024-04-19 20:46:33

Copy
You
"participants": [
      {
        "id": 102,
        "sport_id": 1,
        "country_id": 251,
        "venue_id": 86,
        "gender": "male",
        "name": "Genoa",
        "short_code": "GEN",
        "image_path": "https://cdn.sportmonks.com/images/soccer/teams/6/102.png",
        "founded": 1893,
        "type": "domestic",
        "placeholder": false,
        "last_played_at": "2024-04-15 16:30:00",
        "meta": {
          "location": "home",
          "winner": null,
          "position": 12
        }
      },
      {
        "id": 43,
        "sport_id": 1,
        "country_id": 251,
        "venue_id": 7189,
        "gender": "male",
        "name": "Lazio",
        "short_code": "LAZ",
        "image_path": "https://cdn.sportmonks.com/images/soccer/teams/11/43.png",
        "founded": 1900,
        "type": "domestic",
        "placeholder": false,
        "last_played_at": "2024-04-12 18:45:00",
        "meta": {
          "location": "away",
          "winner": null,
          "position": 8
        }
      }
    ]

i want to get the home team name and image_path and the away team name and image_path

2024-04-19 21:38:34
Claude3 - Sonnet
To get the home team name, image_path, away team name, and image_path, you can loop through the participants array and check the location property in the meta object. Here's an example of how you can do it:

javascript
Copy code
evtSource.onmessage = function (event) {
  const data = JSON.parse(event.data);
  console.log(data);
  const tableWrapper = document.getElementsByClassName('table_wrapper')[0];

  // Clear the existing content
  tableWrapper.innerHTML = '';

  data.forEach((fixture) => {
    // Get current time or state name
    const tickingPeriod = fixture.periods?.find(
      (period) => period.ticking === true
    );
    let currentTimeOrState;
    let liveTicker = ''; // Initialize liveTicker as an empty string
    let addedTime = ''; // Initialize addedTime as an empty string

    let homeTeamName = '';
    let homeTeamImagePath = '';
    let awayTeamName = '';
    let awayTeamImagePath = '';

    // Get home and away team details
    fixture.participants.forEach((participant) => {
      if (participant.meta.location === 'home') {
        homeTeamName = participant.name;
        homeTeamImagePath = participant.image_path;
      } else if (participant.meta.location === 'away') {
        awayTeamName = participant.name;
        awayTeamImagePath = participant.image_path;
      }
    });

    // Rest of your code...
  });
};
In this updated code, we've added four new variables: homeTeamName, homeTeamImagePath, awayTeamName, and awayTeamImagePath. We then loop through the participants array of the current fixture and check the meta.location property. If it's 'home', we assign the name and image_path properties to homeTeamName and homeTeamImagePath, respectively. If it's 'away', we assign the name and image_path properties to awayTeamName and awayTeamImagePath, respectively.

After this loop, you'll have the home team name and image path, as well as the away team name and image path, stored in the respective variables. You can then use these variables in your HTML template or perform any other operations as needed.

Note: Make sure to add this code inside the data.forEach((fixture) => { ... }) loop to get the team details for each fixture.

2024-04-19 21:38:35

Copy
You
"scores": [
      {
        "id": 14252220,
        "fixture_id": 18870659,
        "type_id": 1,
        "participant_id": 102,
        "score": {
          "goals": 0,
          "participant": "home"
        },
        "description": "1ST_HALF"
      },
      {
        "id": 14252221,
        "fixture_id": 18870659,
        "type_id": 1,
        "participant_id": 43,
        "score": {
          "goals": 0,
          "participant": "away"
        },
        "description": "1ST_HALF"
      },
      {
        "id": 14252222,
        "fixture_id": 18870659,
        "type_id": 1525,
        "participant_id": 102,
        "score": {
          "goals": 0,
          "participant": "home"
        },
        "description": "CURRENT"
      },
      {
        "id": 14252223,
        "fixture_id": 18870659,
        "type_id": 1525,
        "participant_id": 43,
        "score": {
          "goals": 1,
          "participant": "away"
        },
        "description": "CURRENT"
      },
      {
        "id": 14252630,
        "fixture_id": 18870659,
        "type_id": 2,
        "participant_id": 102,
        "score": {
          "goals": 0,
          "participant": "home"
        },
        "description": "2ND_HALF"
      },
      {
        "id": 14252631,
        "fixture_id": 18870659,
        "type_id": 2,
        "participant_id": 43,
        "score": {
          "goals": 1,
          "participant": "away"
        },
        "description": "2ND_HALF"
      }
    ]

i also want the current scores from both teams

2024-04-19 21:42:48
Claude3 - Sonnet
Based on the provided data, the current scores for both teams are:

Home Team: 0 Away Team: 1

This can be seen from the objects with "type_id": 1525 and "description": "CURRENT", where the home team's score is "goals": 0 and the away team's score is "goals": 1.

2024-04-19 21:43:10

Copy
You
how do i get the current scores from both teams?

2024-04-19 21:43:33
Claude3 - Sonnet
To get the current scores from both teams, you can loop through the provided data and find the objects where "type_id" is 1525 (which represents the "CURRENT" score), and then extract the corresponding "goals" value for each team.

Here's an example code snippet in Python:

python
Copy code
scores_data = [
    {
        "id": 14252220,
        "fixture_id": 18870659,
        "type_id": 1,
        "participant_id": 102,
        "score": {
            "goals": 0,
            "participant": "home"
        },
        "description": "1ST_HALF"
    },
    {
        "id": 14252221,
        "fixture_id": 18870659,
        "type_id": 1,
        "participant_id": 43,
        "score": {
            "goals": 0,
            "participant": "away"
        },
        "description": "1ST_HALF"
    },
    {
        "id": 14252222,
        "fixture_id": 18870659,
        "type_id": 1525,
        "participant_id": 102,
        "score": {
            "goals": 0,
            "participant": "home"
        },
        "description": "CURRENT"
    },
    {
        "id": 14252223,
        "fixture_id": 18870659,
        "type_id": 1525,
        "participant_id": 43,
        "score": {
            "goals": 1,
            "participant": "away"
        },
        "description": "CURRENT"
    },
    {
        "id": 14252630,
        "fixture_id": 18870659,
        "type_id": 2,
        "participant_id": 102,
        "score": {
            "goals": 0,
            "participant": "home"
        },
        "description": "2ND_HALF"
    },
    {
        "id": 14252631,
        "fixture_id": 18870659,
        "type_id": 2,
        "participant_id": 43,
        "score": {
            "goals": 1,
            "participant": "away"
        },
        "description": "2ND_HALF"
    }
]

home_score = 0
away_score = 0

for score in scores_data:
    if score["type_id"] == 1525:  # Current score
        if score["score"]["participant"] == "home":
            home_score = score["score"]["goals"]
        else:
            away_score = score["score"]["goals"]

print(f"Current Home Score: {home_score}")
print(f"Current Away Score: {away_score}")
This code will output:

Current Home Score: 0
Current Away Score: 1
The key steps are:

Loop through the scores_data list.
Check if the "type_id" is 1525 (representing the "CURRENT" score).
If it is, check the "participant" value to determine if it's the home or away team.
Assign the corresponding "goals" value to the home_score or away_score variable.
After the loop, you'll have the current scores for both teams stored in the home_score and away_score variables.

2024-04-19 21:43:33

Copy
You
"scores": [
      {
        "id": 14252220,
        "fixture_id": 18870659,
        "type_id": 1,
        "participant_id": 102,
        "score": {
          "goals": 0,
          "participant": "home"
        },
        "description": "1ST_HALF"
      },
      {
        "id": 14252221,
        "fixture_id": 18870659,
        "type_id": 1,
        "participant_id": 43,
        "score": {
          "goals": 0,
          "participant": "away"
        },
        "description": "1ST_HALF"
      },
      {
        "id": 14252222,
        "fixture_id": 18870659,
        "type_id": 1525,
        "participant_id": 102,
        "score": {
          "goals": 0,
          "participant": "home"
        },
        "description": "CURRENT"
      },
      {
        "id": 14252223,
        "fixture_id": 18870659,
        "type_id": 1525,
        "participant_id": 43,
        "score": {
          "goals": 1,
          "participant": "away"
        },
        "description": "CURRENT"
      },
      {
        "id": 14252630,
        "fixture_id": 18870659,
        "type_id": 2,
        "participant_id": 102,
        "score": {
          "goals": 0,
          "participant": "home"
        },
        "description": "2ND_HALF"
      },
      {
        "id": 14252631,
        "fixture_id": 18870659,
        "type_id": 2,
        "participant_id": 43,
        "score": {
          "goals": 1,
          "participant": "away"
        },
        "description": "2ND_HALF"
      }
    ]

how do i get the current scores from both teams? in my football app that i gave you info about above

// Format timestamp function
function formatTimestampAsTime(timestamp) {
  if (timestamp === undefined) return '';

  // Convert the Unix timestamp from seconds to milliseconds
  const date = new Date(timestamp * 1000);
  const timeOptions = {
    hour: '2-digit',
    minute: '2-digit',
  };
  return date.toLocaleTimeString('nl-NL', timeOptions);
}

function formatFixtureDate(starting_at) {
  if (!starting_at) return '';

  const dateString = starting_at;
  const date = new Date(dateString);
  const monthNames = [
    'januari',
    'februari',
    'maart',
    'april',
    'mei',
    'juni',
    'juli',
    'augustus',
    'september',
    'oktober',
    'november',
    'december',
  ];
  const day = date.getDate();
  const monthIndex = date.getMonth();
  const year = date.getFullYear().toString().slice(-2);
  const month = monthNames[monthIndex];
  const result = `${day} ${month} '${year}`;
  return result; // Output: "14 augustus '10"
}

const stateNames = {
  1: 'Not Started',
  2: '1st Half',
  3: 'Half Time',
  4: 'Break',
  5: 'Full Time',
  6: 'Extra Time',
  7: 'After Extra Time',
  8: 'After Penalties',
  9: 'Penalties',
  10: 'Postponed',
  11: 'Suspended',
  12: 'Cancelled',
  13: 'To Be Announced',
  14: 'Walk Over',
  15: 'Abandoned',
  16: 'Delayed',
  17: 'Awarded',
  18: 'Interrupted',
  19: 'Awaiting Updates',
  20: 'Deleted',
  21: 'Extra Time - Break',
  22: '2nd Half',
  23: 'ET - 2nd Half',
  25: 'Penalties - Break',
  26: 'Pending',
};

const evtSource = new EventSource(`/livescore-stream`);
evtSource.onmessage = function (event) {
  const data = JSON.parse(event.data);
  // console.log(data);
  const tableWrapper = document.getElementsByClassName('table_wrapper')[0];

  // Clear the existing content
  tableWrapper.innerHTML = '';

  data.forEach((fixture) => {
    // Get current time or state name
    const tickingPeriod = fixture.periods?.find(
      (period) => period.ticking === true
    );
    let currentTimeOrState;
    let liveTicker = ''; // Initialize liveTicker as an empty string
    let addedTime = ''; // Initialize addedTime as an empty string
    let homeTeamName = '';
    let homeTeamImagePath = '';
    let awayTeamName = '';
    let awayTeamImagePath = '';

    // Get home and away team details
    fixture.participants.forEach((participant) => {
      if (participant.meta.location === 'home') {
        homeTeamName = participant.name;
        homeTeamImagePath = participant.image_path;
      } else if (participant.meta.location === 'away') {
        awayTeamName = participant.name;
        awayTeamImagePath = participant.image_path;
      }
    });

    console.log(awayTeamImagePath);

    if (fixture.state.id === 3) {
      currentTimeOrState = 'HT';
    } else {
      // Check if tickingPeriod is not undefined before accessing its properties
      if (tickingPeriod) {
        currentTimeOrState = tickingPeriod.minutes;
        // Check if time_added is available and set the addedTime accordingly
        if (tickingPeriod.time_added !== null) {
          addedTime = `<span class="added-time"> +${tickingPeriod.time_added}</span>`;
        }
      } else {
        currentTimeOrState = stateNames[fixture.state.id] || '';
      }
    }

    // Check if the tickingPeriod exists and set the liveTicker accordingly
    if (tickingPeriod) {
      liveTicker = `<span class="live-data">'</span>`;
    }

    // Create the fixture_row HTML
    const fixtureRowHTML = /*html*/ `
    <div class="fixture_row">
      <div class="row_top">
        <div class="league_info">
          <div class="league_info-country">
            <div class="circle-mask">
              ${
                fixture.league?.country?.image_path
                  ? `<img src="${fixture.league.country.image_path}" alt="logo" height="20" />`
                  : ''
              }
            </div>
            <p class="fixture_date">${fixture.league?.country?.name || ''}</p>
          </div>
          <div class="league_info-league fixture_date">
            ${fixture.league?.name || ''} | Round ${fixture.round?.name || ''}
          </div>
        </div>
        <div class="league_info-time">
          <div class="fixture_date">
            <b>${formatTimestampAsTime(
              fixture.starting_at_timestamp
            )}</b> - ${formatFixtureDate(fixture.starting_at)}
          </div>
        </div>
      </div>
      <div class="row_bottom">
        <div class="state_wrapper"><p class="state">${currentTimeOrState}${liveTicker}${addedTime}</p></div>
        <div class="fixture_h2h">
          <div class="team">
            <p>${homeTeamName}</p>
            <img src="${homeTeamImagePath}" alt="team-logo" height="24" />
          </div>
          <div class="fixture-score">1 - 3</div>
          <div class="team">
            <img src="${awayTeamImagePath}" alt="team-logo" height="24" />
            <p>${awayTeamName}</p>
          </div>
        </div>
        <div class="fixture_details">details</div>
      </div>
    </div>
    `;

    // Insert the fixtureRowHTML inside table_wrapper
    tableWrapper.innerHTML += fixtureRowHTML;
  });
};

2024-04-19 21:44:43
Claude3 - Sonnet
To get the current scores from both teams in your football app, you can follow these steps:

First, find the objects in the scores array where "type_id" is 1525 (representing the "CURRENT" score).
Then, extract the "goals" value for each team based on the "participant" value ("home" or "away").
Here's the code to do that:

javascript
Copy code
const scores = [
  {
    "id": 14252220,
    "fixture_id": 18870659,
    "type_id": 1,
    "participant_id": 102,
    "score": {
      "goals": 0,
      "participant": "home"
    },
    "description": "1ST_HALF"
  },
  {
    "id": 14252221,
    "fixture_id": 18870659,
    "type_id": 1,
    "participant_id": 43,
    "score": {
      "goals": 0,
      "participant": "away"
    },
    "description": "1ST_HALF"
  },
  {
    "id": 14252222,
    "fixture_id": 18870659,
    "type_id": 1525,
    "participant_id": 102,
    "score": {
      "goals": 0,
      "participant": "home"
    },
    "description": "CURRENT"
  },
  {
    "id": 14252223,
    "fixture_id": 18870659,
    "type_id": 1525,
    "participant_id": 43,
    "score": {
      "goals": 1,
      "participant": "away"
    },
    "description": "CURRENT"
  },
  {
    "id": 14252630,
    "fixture_id": 18870659,
    "type_id": 2,
    "participant_id": 102,
    "score": {
      "goals": 0,
      "participant": "home"
    },
    "description": "2ND_HALF"
  },
  {
    "id": 14252631,
    "fixture_id": 18870659,
    "type_id": 2,
    "participant_id": 43,
    "score": {
      "goals": 1,
      "participant": "away"
    },
    "description": "2ND_HALF"
  }
];

let homeScore = 0;
let awayScore = 0;

scores.forEach(score => {
  if (score.type_id === 1525) { // Current score
    if (score.score.participant === 'home') {
      homeScore = score.score.goals;
    } else {
      awayScore = score.score.goals;
    }
  }
});

console.log('Current Home Score:', homeScore);
console.log('Current Away Score:', awayScore);
This code will output:

Current Home Score: 0
Current Away Score: 1
The key steps are:

Loop through the scores array using forEach.
Check if the type_id is 1525 (representing the "CURRENT" score).
If it is, check the participant value ('home' or 'away').
Assign the corresponding goals value to the homeScore or awayScore variable.
After the loop, homeScore and awayScore will hold the current scores for the home and away teams, respectively.

You can then use these values in your football app to display the current scores or perform any other necessary operations.

2024-04-19 21:44:43

Copy